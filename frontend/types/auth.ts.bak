export type Role = 'ADMIN' | 'MANAGER' | 'SELLER' | 'VIEWER';

export interface Permission {
  name: string
  description?: string
  resource?: string
  action?: string
}

export const PermissionUtils = {
  hasPermission: (permissions: Permission[], name: string) =>
    permissions.some(p => p.name === name),

  hasRole: (user: { role?: string }, role: string) =>
    user.role?.toUpperCase() === role.toUpperCase(),

  hasHigherRole: (user: { role?: string }, targetRole: string) => {
    const hierarchy = ['GUEST', 'USER', 'MANAGER', 'ADMIN'];
    const userIndex = hierarchy.indexOf(user.role?.toUpperCase() || 'GUEST');
    const targetIndex = hierarchy.indexOf(targetRole.toUpperCase());
    return userIndex >= targetIndex;
  }
};

export interface LoginCredentials {
  email: string;
  password: string;
  rememberMe?: boolean;
}

export interface RegisterData {
  name?: string;
  email: string;
  password: string;
  passwordConfirmation: string;
  phone: string;
  acceptTerms: boolean;
}

export interface ChangePasswordData {
  currentPassword: string;
  newPassword: string;
  newPasswordConfirmation: string;
}

export const ValidationUtils = {
  validateEmail: (email: string) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email),

  validatePassword: (password: string) => {
    const errors: string[] = [];
    if (password.length < 6) errors.push('A senha deve ter pelo menos 6 caracteres');
    if (!/[A-Z]/.test(password)) errors.push('A senha deve conter pelo menos uma letra maiúscula');
    if (!/[0-9]/.test(password)) errors.push('A senha deve conter pelo menos um número');
    return { isValid: errors.length === 0, errors };
  },

  validatePhone: (phone: string) => /^\(?\d{2}\)?\s?\d{4,5}-?\d{4}$/.test(phone),

  formatPhone: (phone: string) => {
    const digits = phone.replace(/\D/g, '');
    if (digits.length <= 2) return digits;
    if (digits.length <= 6) return () ;
    if (digits.length <= 10) return () -;
    return () -;
  }
};



