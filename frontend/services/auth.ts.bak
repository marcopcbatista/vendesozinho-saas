import axios from "axios";

const API_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:3000/api";

// 🔐 Função de login
export async function login(email: string, password: string) {
  try {
    const response = await axios.post(`${API_URL}/auth/login`, { email, password });
    return response.data;
  } catch (error: any) {
    console.error("Erro no login:", error);
    throw new Error(error.response?.data?.message || "Falha no login");
  }
}

// 🚪 Função de logout
export async function logout() {
  try {
    const response = await axios.post(`${API_URL}/auth/logout`);
    return response.data || { message: "Logout realizado com sucesso!" };
  } catch (error: any) {
    console.error("Erro no logout:", error);
    throw new Error(error.response?.data?.message || "Falha no logout");
  }
}

// 🧩 Validações e formatação
export const ValidationUtils = {
  validateEmail: (email: string) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email),

  validatePassword: (password: string) => {
    const errors: string[] = [];
    if (password.length < 6) errors.push("A senha deve ter pelo menos 6 caracteres");
    if (!/[A-Z]/.test(password)) errors.push("A senha deve conter pelo menos uma letra maiúscula");
    if (!/[0-9]/.test(password)) errors.push("A senha deve conter pelo menos um número");
    return { isValid: errors.length === 0, errors };
  },

  validatePhone: (phone: string) => /^\(?\d{2}\)?\s?\d{4,5}-?\d{4}$/.test(phone),

  formatPhone: (phone: string) => {
    const digits = phone.replace(/\D/g, "");
    if (digits.length <= 2) return digits;
    if (digits.length <= 6) return `(${digits.slice(0, 2)}) ${digits.slice(2)}`;
    if (digits.length <= 10) return `(${digits.slice(0, 2)}) ${digits.slice(2, 6)}-${digits.slice(6)}`;
    return `(${digits.slice(0, 2)}) ${digits.slice(2, 7)}-${digits.slice(7, 11)}`;
  },
};



